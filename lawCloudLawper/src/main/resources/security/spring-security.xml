<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

    <http auto-config="true">
        <!-- form-login -->
        <!--
        一：
            自定义登陆页面：
                username-parameter：表示登录时用户名使用的是哪个参数，默认是 “j_username”。
                password-parameter：表示登录时密码使用的是哪个参数，默认是 “j_password”。
                login-processing-url：表示登录时提交的地址，默认是 “/j-spring-security-check”。
                    这个只是 Spring Security 用来标记登录页面使用的提交地址，真正关于登录这个请求是不需要用户自己处理的。
        -->

        <!--
        二：
            默认情况下，我们在登录成功后会返回到原本受限制的页面。但如果用户是直接请求登录页面，登录成功后应该跳转到哪里呢？
            默认情况下它会跳转到当前应用的根路径，即欢迎页面。
            通过指定 form-login 元素的 default-target-url 属性，我们可以让用户在直接登录后跳转到指定的页面。
            如果想让用户不管是直接请求登录页面，还是通过 Spring Security 引导过来的，登录之后都跳转到指定的页面，
            我们可以通过指定 form-login 元素的 always-use-default-target 属性为 true 来达到这一效果。
        -->

        <!--
        三：
            authentication-success-handler-ref 对应一个 AuthencticationSuccessHandler 实现类的引用。
            如果指定了 authentication-success-handler-ref，
            登录认证成功后会调用指定 AuthenticationSuccessHandler 的 onAuthenticationSuccess 方法。
            我们需要在该方法体内对认证成功做一个处理，然后返回对应的认证成功页面。
            使用了 authentication-success-handler-ref 之后认证成功后的处理就由指定的 AuthenticationSuccessHandler 来处理，
            之前的那些 default-target-url 之类的就都不起作用了。
        -->
        <!--
        四：
            默认情况下登录失败后会返回登录页面，我们也可以通过 form-login 元素的 authentication-failure-url 来指定登录失败后的页面。
            需要注意的是登录失败后的页面跟登录页面一样也是需要配置成在未登录的情况下可以访问，
            否则登录失败后请求失败页面时又会被 Spring Security 重定向到登录页面。
        -->
        <!--
        五：
            类似于 authentication-success-handler-ref，authentication-failure-handler-ref
            对应一个用于处理认证失败的 AuthenticationFailureHandler 实现类。
            指定了该属性，Spring Security 在认证失败后会调用指定 AuthenticationFailureHandler 的 onAuthenticationFailure 方法对认证失败进行处理，
            此时 authentication-failure-url 属性将不再发生作用。
        -->

        <!--http-basic-->
        <!--
            之前介绍的都是基于 form-login 的表单登录，其实 Spring Security 还支持弹窗进行认证。
            通过定义 http 元素下的 http-basic 元素可以达到这一效果。
            需要注意的是当我们同时定义了 http-basic 和 form-login 元素时，form-login 将具有更高的优先级。
            即在需要认证的时候 Spring Security 将引导我们到登录页面，而不是弹出一个窗口。
        -->
        <form-login login-page="/toLogin" login-processing-url="/login.do"
                    username-parameter="username" password-parameter="password"
                    default-target-url="/default_target_url"
                    always-use-default-target="true"
                    authentication-success-handler-ref="authSuccess"

                    authentication-failure-url="/authentication_failure_url"
        />
        <!-- 表示匿名用户可以访问 -->
        <intercept-url pattern="/toLogin" access="hasRole('ANONYMOUS')" />
        <intercept-url pattern="/authentication_failure_url" access="hasRole('ANONYMOUS')" />
        <intercept-url pattern="/**" access="hasRole('USER')"/>
    </http>

    <!--
        需要注意的是使用 jdbc-user-service 定义的 UserDetailsService 是不支持用户组权限的，
        如果需要支持用户组权限的话需要我们使用 JdbcDaoImpl
    -->
    <authentication-manager>
        <authentication-provider user-service-ref="userDetailsService" />
    </authentication-manager>

    <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="enableGroups" value="true"/>
        <beans:property name="rolePrefix" value="ROLE_"/>
    </beans:bean>

    <!-- 认证成功后的处理类 -->
    <beans:bean id="authSuccess" class="com.lawcloud.lawper.security.AuthenticationSuccessHandlerImpl"/>
</beans:beans>










